"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyTodoChanges = exports.applyTodoChangesSync = exports.getTodoBatches = exports.getTodoBatchesSync = exports.readTodosForFilePath = exports.readTodosForFilePathSync = exports.readTodos = exports.readTodosSync = exports.writeTodos = exports.writeTodosSync = exports.todoFileNameFor = exports.todoDirFor = exports.todoFilePathFor = exports.getTodoStorageDirPath = exports.ensureTodoStorageDir = exports.ensureTodoStorageDirSync = exports.todoStorageDirExists = void 0;
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const crypto_1 = require("crypto");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const builders_1 = require("./builders");
const date_utils_1 = require("./date-utils");
/**
 * Determines if the .lint-todo storage directory exists.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @returns - true if the todo storage directory exists, otherwise false.
 */
function todoStorageDirExists(baseDir) {
    return fs_extra_1.existsSync(getTodoStorageDirPath(baseDir));
}
exports.todoStorageDirExists = todoStorageDirExists;
/**
 * Creates, or ensures the creation of, the .lint-todo directory.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @returns - The todo storage directory path.
 */
function ensureTodoStorageDirSync(baseDir) {
    const path = getTodoStorageDirPath(baseDir);
    fs_extra_1.ensureDirSync(path);
    return path;
}
exports.ensureTodoStorageDirSync = ensureTodoStorageDirSync;
/**
 * Creates, or ensures the creation of, the .lint-todo directory.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @returns - A promise that resolves to the todo storage directory path.
 */
async function ensureTodoStorageDir(baseDir) {
    const path = getTodoStorageDirPath(baseDir);
    await fs_extra_1.ensureDir(path);
    return path;
}
exports.ensureTodoStorageDir = ensureTodoStorageDir;
/**
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @returns - The todo storage directory path.
 */
function getTodoStorageDirPath(baseDir) {
    return path_1.posix.join(baseDir, '.lint-todo');
}
exports.getTodoStorageDirPath = getTodoStorageDirPath;
/**
 * Creates a file path from the linting data. Excludes extension.
 *
 * @example
 * 42b8532cff6da75c5e5895a6f33522bf37418d0c/6e3be839
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @param todoData - The linting data for an individual violation.
 * @returns - The todo file path for a {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData} object.
 */
function todoFilePathFor(todoData) {
    return path_1.posix.join(todoDirFor(todoData.filePath), todoFileNameFor(todoData));
}
exports.todoFilePathFor = todoFilePathFor;
/**
 * Creates a short hash for the todo's file path.
 *
 * @param filePath - The filePath from linting data for an individual violation.
 * @returns - The todo directory for a specific filepath.
 */
function todoDirFor(filePath) {
    return crypto_1.createHash('sha1').update(filePath).digest('hex');
}
exports.todoDirFor = todoDirFor;
/**
 * Generates a unique filename for a todo lint data.
 *
 * @param todoData - The linting data for an individual violation.
 * @returns - The todo file name for a {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData} object.
 */
function todoFileNameFor(todoData) {
    const hashParams = `${todoData.engine}${todoData.ruleId}${todoData.line}${todoData.column}`;
    return crypto_1.createHash('sha256').update(hashParams).digest('hex').slice(0, 8);
}
exports.todoFileNameFor = todoFileNameFor;
/**
 * Writes files for todo lint violations. One file is generated for each violation, using a generated
 * hash to identify each.
 *
 * Given a list of todo lint violations, this function will also delete existing files that no longer
 * have a todo lint violation.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @param lintResults - The raw linting data.
 * @param options - An object containing write options.
 * @returns - The counts of added and removed todos.
 */
function writeTodosSync(baseDir, lintResults, options) {
    options = Object.assign({ shouldRemove: () => true }, options !== null && options !== void 0 ? options : {});
    const todoStorageDir = ensureTodoStorageDirSync(baseDir);
    const existing = options.filePath
        ? readTodosForFilePathSync(baseDir, options.filePath)
        : readTodosSync(baseDir);
    // eslint-disable-next-line prefer-const
    let [add, remove] = getTodoBatchesSync(builders_1.buildTodoData(baseDir, lintResults, options.todoConfig), existing, options);
    applyTodoChangesSync(todoStorageDir, add, remove);
    return [add.size, remove.size];
}
exports.writeTodosSync = writeTodosSync;
/**
 * Writes files for todo lint violations. One file is generated for each violation, using a generated
 * hash to identify each.
 *
 * Given a list of todo lint violations, this function will also delete existing files that no longer
 * have a todo lint violation.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @param lintResults - The raw linting data.
 * @param options - An object containing write options.
 * @returns - A promise that resolves to the counts of added and removed todos.
 */
async function writeTodos(baseDir, lintResults, options) {
    options = Object.assign({ shouldRemove: () => true }, options !== null && options !== void 0 ? options : {});
    const todoStorageDir = await ensureTodoStorageDir(baseDir);
    const existing = options.filePath
        ? await readTodosForFilePath(baseDir, options.filePath)
        : await readTodos(baseDir);
    // eslint-disable-next-line prefer-const
    let [add, remove] = await getTodoBatches(builders_1.buildTodoData(baseDir, lintResults, options.todoConfig), existing, options);
    await applyTodoChanges(todoStorageDir, add, remove);
    return [add.size, remove.size];
}
exports.writeTodos = writeTodos;
/**
 * Reads all todo files in the .lint-todo directory.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @returns - A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|Map} of {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L35|FilePath}/{@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData}.
 */
function readTodosSync(baseDir) {
    const map = new Map();
    const todoStorageDir = ensureTodoStorageDirSync(baseDir);
    const todoFileDirs = fs_extra_1.readdirSync(todoStorageDir);
    for (const todoFileDir of todoFileDirs) {
        const fileNames = fs_extra_1.readdirSync(path_1.posix.join(todoStorageDir, todoFileDir));
        for (const fileName of fileNames) {
            const todo = fs_extra_1.readJSONSync(path_1.posix.join(todoStorageDir, todoFileDir, fileName));
            map.set(path_1.posix.join(todoFileDir, path_1.posix.parse(fileName).name), todo);
        }
    }
    return map;
}
exports.readTodosSync = readTodosSync;
/**
 * Reads all todo files in the .lint-todo directory.
 *
 * @param baseDir - The base directory that contains the .lint-todo storage directory.
 * @returns - A Promise that resolves to a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|Map} of {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L35|FilePath}/{@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData}.
 */
async function readTodos(baseDir) {
    const map = new Map();
    const todoStorageDir = await ensureTodoStorageDir(baseDir);
    const todoFileDirs = await fs_extra_1.readdir(todoStorageDir);
    for (const todoFileDir of todoFileDirs) {
        const fileNames = await fs_extra_1.readdir(path_1.posix.join(todoStorageDir, todoFileDir));
        for (const fileName of fileNames) {
            const todo = await fs_extra_1.readJSON(path_1.posix.join(todoStorageDir, todoFileDir, fileName));
            map.set(path_1.posix.join(todoFileDir, path_1.posix.parse(fileName).name), todo);
        }
    }
    return map;
}
exports.readTodos = readTodos;
/**
 * Reads todo files in the .lint-todo directory for a specific filePath.
 *
 * @param todoStorageDir - The .lint-todo storage directory.
 * @param filePath - The relative file path of the file to return todo items for.
 * @returns - A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|Map} of {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L35|FilePath}/{@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData}.
 */
function readTodosForFilePathSync(baseDir, filePath) {
    const map = new Map();
    const todoStorageDir = ensureTodoStorageDirSync(baseDir);
    const todoFileDir = todoDirFor(filePath);
    const todoFilePathDir = path_1.posix.join(todoStorageDir, todoFileDir);
    try {
        const fileNames = fs_extra_1.readdirSync(todoFilePathDir);
        for (const fileName of fileNames) {
            const todo = fs_extra_1.readJSONSync(path_1.posix.join(todoFilePathDir, fileName));
            map.set(path_1.posix.join(todoFileDir, path_1.posix.parse(fileName).name), todo);
        }
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            return map;
        }
        throw error;
    }
    return map;
}
exports.readTodosForFilePathSync = readTodosForFilePathSync;
/**
 * Reads todo files in the .lint-todo directory for a specific filePath.
 *
 * @param todoStorageDir - The .lint-todo storage directory.
 * @param filePath - The relative file path of the file to return todo items for.
 * @returns - A Promise that resolves to a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|Map} of {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L35|FilePath}/{@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData}.
 */
async function readTodosForFilePath(baseDir, filePath) {
    const map = new Map();
    const todoStorageDir = await ensureTodoStorageDir(baseDir);
    const todoFileDir = todoDirFor(filePath);
    const todoFilePathDir = path_1.posix.join(todoStorageDir, todoFileDir);
    try {
        const fileNames = await fs_extra_1.readdir(todoFilePathDir);
        for (const fileName of fileNames) {
            const todo = await fs_extra_1.readJSON(path_1.posix.join(todoFilePathDir, fileName));
            map.set(path_1.posix.join(todoFileDir, path_1.posix.parse(fileName).name), todo);
        }
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            return map;
        }
        throw error;
    }
    return map;
}
exports.readTodosForFilePath = readTodosForFilePath;
/**
 * Gets 3 maps containing todo items to add, remove, or those that are stable (not to be modified).
 *
 * @param lintResults - The linting data for all violations.
 * @param existing - Existing todo lint data.
 * @returns - A {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|Map} of {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L35|FilePath}/{@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData}.
 */
function getTodoBatchesSync(lintResults, existing, options) {
    const add = new Map();
    const remove = new Map();
    const expired = new Map();
    const stable = new Map();
    for (const [fileHash, todoDatum] of lintResults) {
        if (!existing.has(fileHash)) {
            add.set(fileHash, todoDatum);
        }
        else {
            const existingTodo = existing.get(fileHash);
            if (existingTodo && !date_utils_1.isExpired(existingTodo.errorDate)) {
                stable.set(fileHash, todoDatum);
            }
        }
    }
    for (const [fileHash, todoDatum] of existing) {
        if (lintResults.has(fileHash) &&
            date_utils_1.isExpired(todoDatum.errorDate) &&
            options.shouldRemove(todoDatum)) {
            expired.set(fileHash, todoDatum);
        }
        else if (!lintResults.has(fileHash) && options.shouldRemove(todoDatum)) {
            remove.set(fileHash, todoDatum);
        }
        else {
            stable.set(fileHash, todoDatum);
        }
    }
    return [add, remove, stable, expired];
}
exports.getTodoBatchesSync = getTodoBatchesSync;
/**
 * Gets 3 maps containing todo items to add, remove, or those that are stable (not to be modified).
 *
 * @param lintResults - The linting data for all violations.
 * @param existing - Existing todo lint data.
 * @returns - A Promise that resolves to a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map|Map} of {@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L35|FilePath}/{@link https://github.com/ember-template-lint/ember-template-lint-todo-utils/blob/master/src/types/index.ts#L36|TodoData}.
 */
async function getTodoBatches(lintResults, existing, options) {
    const add = new Map();
    const remove = new Map();
    const expired = new Map();
    const stable = new Map();
    for (const [fileHash, todoDatum] of lintResults) {
        if (!existing.has(fileHash)) {
            add.set(fileHash, todoDatum);
        }
        else {
            const existingTodo = existing.get(fileHash);
            if (existingTodo && !date_utils_1.isExpired(existingTodo.errorDate)) {
                stable.set(fileHash, todoDatum);
            }
        }
    }
    for (const [fileHash, todoDatum] of existing) {
        if (lintResults.has(fileHash) &&
            date_utils_1.isExpired(todoDatum.errorDate) &&
            options.shouldRemove(todoDatum)) {
            expired.set(fileHash, todoDatum);
        }
        else if (!lintResults.has(fileHash) && options.shouldRemove(todoDatum)) {
            remove.set(fileHash, todoDatum);
        }
        else {
            stable.set(fileHash, todoDatum);
        }
    }
    return [add, remove, stable, expired];
}
exports.getTodoBatches = getTodoBatches;
/**
 * Applies todo changes, either adding or removing, based on batches from `getTodoBatches`.
 *
 * @param todoStorageDir - The .lint-todo storage directory.
 * @param add - Batch of todos to add.
 * @param remove - Batch of todos to remove.
 */
function applyTodoChangesSync(todoStorageDir, add, remove) {
    for (const [fileHash, todoDatum] of add) {
        const { dir } = path_1.posix.parse(fileHash);
        fs_extra_1.ensureDirSync(path_1.posix.join(todoStorageDir, dir));
        fs_extra_1.writeJsonSync(path_1.posix.join(todoStorageDir, `${fileHash}.json`), todoDatum);
    }
    for (const [fileHash] of remove) {
        const { dir } = path_1.posix.parse(fileHash);
        const todoDir = path_1.posix.join(todoStorageDir, dir);
        fs_extra_1.unlinkSync(path_1.posix.join(todoStorageDir, `${fileHash}.json`));
        if (fs_extra_1.readdirSync(todoDir).length === 0) {
            fs_extra_1.rmdirSync(todoDir);
        }
    }
}
exports.applyTodoChangesSync = applyTodoChangesSync;
/**
 * Applies todo changes, either adding or removing, based on batches from `getTodoBatches`.
 *
 * @param todoStorageDir - The .lint-todo storage directory.
 * @param add - Batch of todos to add.
 * @param remove - Batch of todos to remove.
 */
async function applyTodoChanges(todoStorageDir, add, remove) {
    for (const [fileHash, todoDatum] of add) {
        const { dir } = path_1.posix.parse(fileHash);
        await fs_extra_1.ensureDir(path_1.posix.join(todoStorageDir, dir));
        await fs_extra_1.writeJson(path_1.posix.join(todoStorageDir, `${fileHash}.json`), todoDatum);
    }
    for (const [fileHash] of remove) {
        const { dir } = path_1.posix.parse(fileHash);
        const todoDir = path_1.posix.join(todoStorageDir, dir);
        await fs_extra_1.unlink(path_1.posix.join(todoStorageDir, `${fileHash}.json`));
        if ((await fs_extra_1.readdir(todoDir)).length === 0) {
            await fs_extra_1.rmdir(todoDir);
        }
    }
}
exports.applyTodoChanges = applyTodoChanges;
//# sourceMappingURL=io.js.map