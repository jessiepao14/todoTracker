"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class TrackedMap extends Map {
    // **** KEY GETTERS ****
    get(key) {
        util_1.consumeKey(this, key);
        return super.get(key);
    }
    has(key) {
        util_1.consumeKey(this, key);
        return super.has(key);
    }
    // **** ALL GETTERS ****
    entries() {
        util_1.consumeCollection(this);
        return super.entries();
    }
    keys() {
        util_1.consumeCollection(this);
        return super.keys();
    }
    values() {
        util_1.consumeCollection(this);
        return super.values();
    }
    forEach(fn) {
        util_1.consumeCollection(this);
        super.forEach(fn);
    }
    get size() {
        util_1.consumeCollection(this);
        return super.size;
    }
    // **** KEY SETTERS ****
    set(key, value) {
        util_1.dirtyKey(this, key);
        util_1.dirtyCollection(this);
        return super.set(key, value);
    }
    delete(key) {
        util_1.dirtyKey(this, key);
        util_1.dirtyCollection(this);
        return super.delete(key);
    }
    // **** ALL SETTERS ****
    clear() {
        super.forEach((_v, k) => util_1.dirtyKey(this, k));
        util_1.dirtyCollection(this);
        return super.clear();
    }
}
exports.TrackedMap = TrackedMap;
if (typeof Symbol !== undefined) {
    let originalIterator = TrackedMap.prototype[Symbol.iterator];
    Object.defineProperty(TrackedMap.prototype, Symbol.iterator, {
        get() {
            util_1.consumeCollection(this);
            return originalIterator;
        }
    });
}
class TrackedWeakMap extends WeakMap {
    get(key) {
        util_1.consumeKey(this, key);
        return super.get(key);
    }
    has(key) {
        util_1.consumeKey(this, key);
        return super.has(key);
    }
    set(key, value) {
        util_1.dirtyKey(this, key);
        return super.set(key, value);
    }
    delete(key) {
        util_1.dirtyKey(this, key);
        return super.delete(key);
    }
}
exports.TrackedWeakMap = TrackedWeakMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLy1wcml2YXRlL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUtnQjtBQUVoQixNQUFhLFVBQXFDLFNBQVEsR0FBUztJQUNqRSx3QkFBd0I7SUFDeEIsR0FBRyxDQUFDLEdBQU07UUFDUixpQkFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFNO1FBQ1IsaUJBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsT0FBTztRQUNMLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0Ysd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU07UUFDSix3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQXlDO1FBQy9DLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEdBQUcsQ0FBQyxHQUFNLEVBQUUsS0FBUTtRQUNsQixlQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLHNCQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQU07UUFDWCxlQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLHNCQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsS0FBSztRQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUMsc0JBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFuRUQsZ0NBbUVDO0FBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7SUFDL0IsSUFBSSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUU3RCxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRTtRQUMzRCxHQUFHO1lBQ0Qsd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEIsT0FBTyxnQkFBZ0IsQ0FBQztRQUMxQixDQUFDO0tBQ0YsQ0FBQyxDQUFDO0NBQ0o7QUFFRCxNQUFhLGNBQXVELFNBQVEsT0FHM0U7SUFDQyxHQUFHLENBQUMsR0FBTTtRQUNSLGlCQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQU07UUFDUixpQkFBVSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFNLEVBQUUsS0FBUTtRQUNsQixlQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFNO1FBQ1gsZUFBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVwQixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNGO0FBM0JELHdDQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNvbnN1bWVLZXksXG4gIGNvbnN1bWVDb2xsZWN0aW9uLFxuICBkaXJ0eUtleSxcbiAgZGlydHlDb2xsZWN0aW9uXG59IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBUcmFja2VkTWFwPEsgPSB1bmtub3duLCBWID0gdW5rbm93bj4gZXh0ZW5kcyBNYXA8SywgVj4ge1xuICAvLyAqKioqIEtFWSBHRVRURVJTICoqKipcbiAgZ2V0KGtleTogSykge1xuICAgIGNvbnN1bWVLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5nZXQoa2V5KTtcbiAgfVxuXG4gIGhhcyhrZXk6IEspIHtcbiAgICBjb25zdW1lS2V5KHRoaXMsIGtleSk7XG5cbiAgICByZXR1cm4gc3VwZXIuaGFzKGtleSk7XG4gIH1cblxuICAvLyAqKioqIEFMTCBHRVRURVJTICoqKipcbiAgZW50cmllcygpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5lbnRyaWVzKCk7XG4gIH1cblxuICBrZXlzKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmtleXMoKTtcbiAgfVxuXG4gIHZhbHVlcygpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci52YWx1ZXMoKTtcbiAgfVxuXG4gIGZvckVhY2goZm46ICh2YWx1ZTogViwga2V5OiBLLCBtYXA6IHRoaXMpID0+IHZvaWQpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHN1cGVyLmZvckVhY2goZm4pO1xuICB9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuc2l6ZTtcbiAgfVxuXG4gIC8vICoqKiogS0VZIFNFVFRFUlMgKioqKlxuICBzZXQoa2V5OiBLLCB2YWx1ZTogVikge1xuICAgIGRpcnR5S2V5KHRoaXMsIGtleSk7XG4gICAgZGlydHlDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIGRlbGV0ZShrZXk6IEspIHtcbiAgICBkaXJ0eUtleSh0aGlzLCBrZXkpO1xuICAgIGRpcnR5Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIC8vICoqKiogQUxMIFNFVFRFUlMgKioqKlxuICBjbGVhcigpIHtcbiAgICBzdXBlci5mb3JFYWNoKChfdiwgaykgPT4gZGlydHlLZXkodGhpcywgaykpO1xuICAgIGRpcnR5Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5jbGVhcigpO1xuICB9XG59XG5cbmlmICh0eXBlb2YgU3ltYm9sICE9PSB1bmRlZmluZWQpIHtcbiAgbGV0IG9yaWdpbmFsSXRlcmF0b3IgPSBUcmFja2VkTWFwLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFja2VkTWFwLnByb3RvdHlwZSwgU3ltYm9sLml0ZXJhdG9yLCB7XG4gICAgZ2V0KCkge1xuICAgICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG4gICAgICByZXR1cm4gb3JpZ2luYWxJdGVyYXRvcjtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tlZFdlYWtNYXA8SyBleHRlbmRzIG9iamVjdCA9IG9iamVjdCwgViA9IHVua25vd24+IGV4dGVuZHMgV2Vha01hcDxcbiAgSyxcbiAgVlxuPiB7XG4gIGdldChrZXk6IEspIHtcbiAgICBjb25zdW1lS2V5KHRoaXMsIGtleSk7XG5cbiAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gIH1cblxuICBoYXMoa2V5OiBLKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmhhcyhrZXkpO1xuICB9XG5cbiAgc2V0KGtleTogSywgdmFsdWU6IFYpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIGRlbGV0ZShrZXk6IEspIHtcbiAgICBkaXJ0eUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmRlbGV0ZShrZXkpO1xuICB9XG59XG4iXX0=