"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
class TrackedSet extends Set {
    // **** KEY GETTERS ****
    has(value) {
        util_1.consumeKey(this, value);
        return super.has(value);
    }
    // **** ALL GETTERS ****
    entries() {
        util_1.consumeCollection(this);
        return super.entries();
    }
    keys() {
        util_1.consumeCollection(this);
        return super.keys();
    }
    values() {
        util_1.consumeCollection(this);
        return super.values();
    }
    forEach(fn) {
        util_1.consumeCollection(this);
        super.forEach(fn);
    }
    get size() {
        util_1.consumeCollection(this);
        return super.size;
    }
    // **** KEY SETTERS ****
    add(value) {
        util_1.dirtyKey(this, value);
        util_1.dirtyCollection(this);
        return super.add(value);
    }
    delete(value) {
        util_1.dirtyKey(this, value);
        util_1.dirtyCollection(this);
        return super.delete(value);
    }
    // **** ALL SETTERS ****
    clear() {
        super.forEach((_v, k) => util_1.dirtyKey(this, k));
        util_1.dirtyCollection(this);
        return super.clear();
    }
}
exports.TrackedSet = TrackedSet;
if (typeof Symbol !== undefined) {
    let originalIterator = TrackedSet.prototype[Symbol.iterator];
    Object.defineProperty(TrackedSet.prototype, Symbol.iterator, {
        get() {
            util_1.consumeCollection(this);
            return originalIterator;
        }
    });
}
class TrackedWeakSet extends WeakSet {
    has(value) {
        util_1.consumeKey(this, value);
        return super.has(value);
    }
    add(value) {
        util_1.dirtyKey(this, value);
        return super.add(value);
    }
    delete(value) {
        util_1.dirtyKey(this, value);
        return super.delete(value);
    }
}
exports.TrackedWeakSet = TrackedWeakSet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLy1wcml2YXRlL3NldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUtnQjtBQUVoQixNQUFhLFVBQXdCLFNBQVEsR0FBTTtJQUNqRCx3QkFBd0I7SUFDeEIsR0FBRyxDQUFDLEtBQVE7UUFDVixpQkFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixPQUFPO1FBQ0wsd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUk7UUFDRix3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTTtRQUNKLHdCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBNkM7UUFDbkQsd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sd0JBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsR0FBRyxDQUFDLEtBQVE7UUFDVixlQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLHNCQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBUTtRQUNiLGVBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEIsc0JBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixLQUFLO1FBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxzQkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQTdERCxnQ0E2REM7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsRUFBRTtJQUMvQixJQUFJLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTdELE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQzNELEdBQUc7WUFDRCx3QkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixPQUFPLGdCQUFnQixDQUFDO1FBQzFCLENBQUM7S0FDRixDQUFDLENBQUM7Q0FDSjtBQUVELE1BQWEsY0FBMEMsU0FBUSxPQUFVO0lBQ3ZFLEdBQUcsQ0FBQyxLQUFRO1FBQ1YsaUJBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxHQUFHLENBQUMsS0FBUTtRQUNWLGVBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBUTtRQUNiLGVBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7Q0FDRjtBQWxCRCx3Q0FrQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb25zdW1lS2V5LFxuICBjb25zdW1lQ29sbGVjdGlvbixcbiAgZGlydHlLZXksXG4gIGRpcnR5Q29sbGVjdGlvblxufSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgVHJhY2tlZFNldDxUID0gdW5rbm93bj4gZXh0ZW5kcyBTZXQ8VD4ge1xuICAvLyAqKioqIEtFWSBHRVRURVJTICoqKipcbiAgaGFzKHZhbHVlOiBUKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuaGFzKHZhbHVlKTtcbiAgfVxuXG4gIC8vICoqKiogQUxMIEdFVFRFUlMgKioqKlxuICBlbnRyaWVzKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmVudHJpZXMoKTtcbiAgfVxuXG4gIGtleXMoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIua2V5cygpO1xuICB9XG5cbiAgdmFsdWVzKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlcygpO1xuICB9XG5cbiAgZm9yRWFjaChmbjogKHZhbHVlMTogVCwgdmFsdWUyOiBULCBtYXA6IHRoaXMpID0+IHZvaWQpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHN1cGVyLmZvckVhY2goZm4pO1xuICB9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuc2l6ZTtcbiAgfVxuXG4gIC8vICoqKiogS0VZIFNFVFRFUlMgKioqKlxuICBhZGQodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG4gICAgZGlydHlDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmFkZCh2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG4gICAgZGlydHlDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmRlbGV0ZSh2YWx1ZSk7XG4gIH1cblxuICAvLyAqKioqIEFMTCBTRVRURVJTICoqKipcbiAgY2xlYXIoKSB7XG4gICAgc3VwZXIuZm9yRWFjaCgoX3YsIGspID0+IGRpcnR5S2V5KHRoaXMsIGspKTtcbiAgICBkaXJ0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuY2xlYXIoKTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gdW5kZWZpbmVkKSB7XG4gIGxldCBvcmlnaW5hbEl0ZXJhdG9yID0gVHJhY2tlZFNldC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhY2tlZFNldC5wcm90b3R5cGUsIFN5bWJvbC5pdGVyYXRvciwge1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsSXRlcmF0b3I7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrZWRXZWFrU2V0PFQgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3Q+IGV4dGVuZHMgV2Vha1NldDxUPiB7XG4gIGhhcyh2YWx1ZTogVCkge1xuICAgIGNvbnN1bWVLZXkodGhpcywgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmhhcyh2YWx1ZSk7XG4gIH1cblxuICBhZGQodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuYWRkKHZhbHVlKTtcbiAgfVxuXG4gIGRlbGV0ZSh2YWx1ZTogVCkge1xuICAgIGRpcnR5S2V5KHRoaXMsIHZhbHVlKTtcblxuICAgIHJldHVybiBzdXBlci5kZWxldGUodmFsdWUpO1xuICB9XG59XG4iXX0=