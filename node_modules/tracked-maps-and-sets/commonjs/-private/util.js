"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const tracking_1 = require("@glimmer/tracking");
class Tag {
    static consumeTag(tag) {
        // read the tag value
        tag.__tag_value__;
    }
    static dirtyTag(tag) {
        // write the tag value
        tag.__tag_value__ = undefined;
    }
}
__decorate([
    tracking_1.tracked
], Tag.prototype, "__tag_value__", void 0);
function createTag() {
    return new Tag();
}
exports.createTag = createTag;
exports.consumeTag = Tag.consumeTag;
exports.dirtyTag = Tag.dirtyTag;
////////////
const COLLECTION_SYMBOL = {};
exports.consumeCollection = (obj) => {
    consumeKey(obj, COLLECTION_SYMBOL);
};
exports.dirtyCollection = (obj) => {
    dirtyKey(obj, COLLECTION_SYMBOL);
};
if (Ember !== undefined) {
    // eslint-disable-next-line ember/new-module-imports
    exports.consumeCollection = (obj) => Ember.get(obj, '[]');
    // eslint-disable-next-line ember/new-module-imports
    exports.dirtyCollection = (obj) => Ember.notifyPropertyChange(obj, '[]');
}
////////////
const OBJECT_TAGS = new WeakMap();
function getOrCreateTag(obj, key) {
    let tags = OBJECT_TAGS.get(obj);
    if (tags === undefined) {
        tags = new Map();
        OBJECT_TAGS.set(obj, tags);
    }
    let tag = tags.get(key);
    if (tag === undefined) {
        tag = new Tag();
        tags.set(key, tag);
    }
    return tag;
}
function consumeKey(obj, key) {
    exports.consumeTag(getOrCreateTag(obj, key));
}
exports.consumeKey = consumeKey;
function dirtyKey(obj, key) {
    exports.dirtyTag(getOrCreateTag(obj, key));
}
exports.dirtyKey = dirtyKey;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8tcHJpdmF0ZS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsZ0RBQTRDO0FBRTVDLE1BQU0sR0FBRztJQUdQLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBUTtRQUN4QixxQkFBcUI7UUFDckIsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFRO1FBQ3RCLHNCQUFzQjtRQUN0QixHQUFHLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0NBQ0Y7QUFYVTtJQUFSLGtCQUFPOzBDQUFrQztBQWE1QyxTQUFnQixTQUFTO0lBQ3ZCLE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUNuQixDQUFDO0FBRkQsOEJBRUM7QUFFWSxRQUFBLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO0FBQzVCLFFBQUEsUUFBUSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUM7QUFFckMsWUFBWTtBQUVaLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBRWxCLFFBQUEsaUJBQWlCLEdBQUcsQ0FBQyxHQUFXLEVBQVEsRUFBRTtJQUNuRCxVQUFVLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRVMsUUFBQSxlQUFlLEdBQUcsQ0FBQyxHQUFXLEVBQVEsRUFBRTtJQUNqRCxRQUFRLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBSUYsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO0lBQ3ZCLG9EQUFvRDtJQUNwRCx5QkFBaUIsR0FBRyxDQUFDLEdBQUcsRUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEQsb0RBQW9EO0lBQ3BELHVCQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDeEU7QUFFRCxZQUFZO0FBRVosTUFBTSxXQUFXLEdBQUcsSUFBSSxPQUFPLEVBQTZCLENBQUM7QUFFN0QsU0FBUyxjQUFjLENBQUMsR0FBVyxFQUFFLEdBQVk7SUFDL0MsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVoQyxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDdEIsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDakIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDNUI7SUFFRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXhCLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtRQUNyQixHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNwQjtJQUVELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxHQUFXLEVBQUUsR0FBWTtJQUNsRCxrQkFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRkQsZ0NBRUM7QUFFRCxTQUFnQixRQUFRLENBQUMsR0FBVyxFQUFFLEdBQVk7SUFDaEQsZ0JBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQztBQUZELDRCQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJhY2tlZCB9IGZyb20gJ0BnbGltbWVyL3RyYWNraW5nJztcblxuY2xhc3MgVGFnIHtcbiAgQHRyYWNrZWQgcHJpdmF0ZSBfX3RhZ192YWx1ZV9fOiB1bmRlZmluZWQ7XG5cbiAgc3RhdGljIGNvbnN1bWVUYWcodGFnOiBUYWcpIHtcbiAgICAvLyByZWFkIHRoZSB0YWcgdmFsdWVcbiAgICB0YWcuX190YWdfdmFsdWVfXztcbiAgfVxuXG4gIHN0YXRpYyBkaXJ0eVRhZyh0YWc6IFRhZykge1xuICAgIC8vIHdyaXRlIHRoZSB0YWcgdmFsdWVcbiAgICB0YWcuX190YWdfdmFsdWVfXyA9IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnKCkge1xuICByZXR1cm4gbmV3IFRhZygpO1xufVxuXG5leHBvcnQgY29uc3QgY29uc3VtZVRhZyA9IFRhZy5jb25zdW1lVGFnO1xuZXhwb3J0IGNvbnN0IGRpcnR5VGFnID0gVGFnLmRpcnR5VGFnO1xuXG4vLy8vLy8vLy8vLy9cblxuY29uc3QgQ09MTEVDVElPTl9TWU1CT0wgPSB7fTtcblxuZXhwb3J0IGxldCBjb25zdW1lQ29sbGVjdGlvbiA9IChvYmo6IG9iamVjdCk6IHZvaWQgPT4ge1xuICBjb25zdW1lS2V5KG9iaiwgQ09MTEVDVElPTl9TWU1CT0wpO1xufTtcblxuZXhwb3J0IGxldCBkaXJ0eUNvbGxlY3Rpb24gPSAob2JqOiBvYmplY3QpOiB2b2lkID0+IHtcbiAgZGlydHlLZXkob2JqLCBDT0xMRUNUSU9OX1NZTUJPTCk7XG59O1xuXG5kZWNsYXJlIGNvbnN0IEVtYmVyOiBhbnk7XG5cbmlmIChFbWJlciAhPT0gdW5kZWZpbmVkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlbWJlci9uZXctbW9kdWxlLWltcG9ydHNcbiAgY29uc3VtZUNvbGxlY3Rpb24gPSAob2JqKTogdm9pZCA9PiBFbWJlci5nZXQob2JqLCAnW10nKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVtYmVyL25ldy1tb2R1bGUtaW1wb3J0c1xuICBkaXJ0eUNvbGxlY3Rpb24gPSAob2JqKTogdm9pZCA9PiBFbWJlci5ub3RpZnlQcm9wZXJ0eUNoYW5nZShvYmosICdbXScpO1xufVxuXG4vLy8vLy8vLy8vLy9cblxuY29uc3QgT0JKRUNUX1RBR1MgPSBuZXcgV2Vha01hcDxvYmplY3QsIE1hcDx1bmtub3duLCBUYWc+PigpO1xuXG5mdW5jdGlvbiBnZXRPckNyZWF0ZVRhZyhvYmo6IG9iamVjdCwga2V5OiB1bmtub3duKSB7XG4gIGxldCB0YWdzID0gT0JKRUNUX1RBR1MuZ2V0KG9iaik7XG5cbiAgaWYgKHRhZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgIHRhZ3MgPSBuZXcgTWFwKCk7XG4gICAgT0JKRUNUX1RBR1Muc2V0KG9iaiwgdGFncyk7XG4gIH1cblxuICBsZXQgdGFnID0gdGFncy5nZXQoa2V5KTtcblxuICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICB0YWcgPSBuZXcgVGFnKCk7XG4gICAgdGFncy5zZXQoa2V5LCB0YWcpO1xuICB9XG5cbiAgcmV0dXJuIHRhZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnN1bWVLZXkob2JqOiBvYmplY3QsIGtleTogdW5rbm93bikge1xuICBjb25zdW1lVGFnKGdldE9yQ3JlYXRlVGFnKG9iaiwga2V5KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJ0eUtleShvYmo6IG9iamVjdCwga2V5OiB1bmtub3duKSB7XG4gIGRpcnR5VGFnKGdldE9yQ3JlYXRlVGFnKG9iaiwga2V5KSk7XG59XG4iXX0=