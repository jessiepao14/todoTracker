import { consumeKey, consumeCollection, dirtyKey, dirtyCollection } from './util';
export class TrackedSet extends Set {
    // **** KEY GETTERS ****
    has(value) {
        consumeKey(this, value);
        return super.has(value);
    }
    // **** ALL GETTERS ****
    entries() {
        consumeCollection(this);
        return super.entries();
    }
    keys() {
        consumeCollection(this);
        return super.keys();
    }
    values() {
        consumeCollection(this);
        return super.values();
    }
    forEach(fn) {
        consumeCollection(this);
        super.forEach(fn);
    }
    get size() {
        consumeCollection(this);
        return super.size;
    }
    // **** KEY SETTERS ****
    add(value) {
        dirtyKey(this, value);
        dirtyCollection(this);
        return super.add(value);
    }
    delete(value) {
        dirtyKey(this, value);
        dirtyCollection(this);
        return super.delete(value);
    }
    // **** ALL SETTERS ****
    clear() {
        super.forEach((_v, k) => dirtyKey(this, k));
        dirtyCollection(this);
        return super.clear();
    }
}
if (typeof Symbol !== undefined) {
    let originalIterator = TrackedSet.prototype[Symbol.iterator];
    Object.defineProperty(TrackedSet.prototype, Symbol.iterator, {
        get() {
            consumeCollection(this);
            return originalIterator;
        }
    });
}
export class TrackedWeakSet extends WeakSet {
    has(value) {
        consumeKey(this, value);
        return super.has(value);
    }
    add(value) {
        dirtyKey(this, value);
        return super.add(value);
    }
    delete(value) {
        dirtyKey(this, value);
        return super.delete(value);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLy1wcml2YXRlL3NldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLGlCQUFpQixFQUNqQixRQUFRLEVBQ1IsZUFBZSxFQUNoQixNQUFNLFFBQVEsQ0FBQztBQUVoQixNQUFNLE9BQU8sVUFBd0IsU0FBUSxHQUFNO0lBQ2pELHdCQUF3QjtJQUN4QixHQUFHLENBQUMsS0FBUTtRQUNWLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsT0FBTztRQUNMLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0YsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU07UUFDSixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQTZDO1FBQ25ELGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEdBQUcsQ0FBQyxLQUFRO1FBQ1YsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0QixlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBUTtRQUNiLFFBQVEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEIsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEtBQUs7UUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsRUFBRTtJQUMvQixJQUFJLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTdELE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQzNELEdBQUc7WUFDRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixPQUFPLGdCQUFnQixDQUFDO1FBQzFCLENBQUM7S0FDRixDQUFDLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxjQUEwQyxTQUFRLE9BQVU7SUFDdkUsR0FBRyxDQUFDLEtBQVE7UUFDVixVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQVE7UUFDVixRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVE7UUFDYixRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb25zdW1lS2V5LFxuICBjb25zdW1lQ29sbGVjdGlvbixcbiAgZGlydHlLZXksXG4gIGRpcnR5Q29sbGVjdGlvblxufSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgVHJhY2tlZFNldDxUID0gdW5rbm93bj4gZXh0ZW5kcyBTZXQ8VD4ge1xuICAvLyAqKioqIEtFWSBHRVRURVJTICoqKipcbiAgaGFzKHZhbHVlOiBUKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuaGFzKHZhbHVlKTtcbiAgfVxuXG4gIC8vICoqKiogQUxMIEdFVFRFUlMgKioqKlxuICBlbnRyaWVzKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmVudHJpZXMoKTtcbiAgfVxuXG4gIGtleXMoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIua2V5cygpO1xuICB9XG5cbiAgdmFsdWVzKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnZhbHVlcygpO1xuICB9XG5cbiAgZm9yRWFjaChmbjogKHZhbHVlMTogVCwgdmFsdWUyOiBULCBtYXA6IHRoaXMpID0+IHZvaWQpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHN1cGVyLmZvckVhY2goZm4pO1xuICB9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuc2l6ZTtcbiAgfVxuXG4gIC8vICoqKiogS0VZIFNFVFRFUlMgKioqKlxuICBhZGQodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG4gICAgZGlydHlDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmFkZCh2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG4gICAgZGlydHlDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmRlbGV0ZSh2YWx1ZSk7XG4gIH1cblxuICAvLyAqKioqIEFMTCBTRVRURVJTICoqKipcbiAgY2xlYXIoKSB7XG4gICAgc3VwZXIuZm9yRWFjaCgoX3YsIGspID0+IGRpcnR5S2V5KHRoaXMsIGspKTtcbiAgICBkaXJ0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuY2xlYXIoKTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gdW5kZWZpbmVkKSB7XG4gIGxldCBvcmlnaW5hbEl0ZXJhdG9yID0gVHJhY2tlZFNldC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhY2tlZFNldC5wcm90b3R5cGUsIFN5bWJvbC5pdGVyYXRvciwge1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsSXRlcmF0b3I7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrZWRXZWFrU2V0PFQgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3Q+IGV4dGVuZHMgV2Vha1NldDxUPiB7XG4gIGhhcyh2YWx1ZTogVCkge1xuICAgIGNvbnN1bWVLZXkodGhpcywgdmFsdWUpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmhhcyh2YWx1ZSk7XG4gIH1cblxuICBhZGQodmFsdWU6IFQpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCB2YWx1ZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuYWRkKHZhbHVlKTtcbiAgfVxuXG4gIGRlbGV0ZSh2YWx1ZTogVCkge1xuICAgIGRpcnR5S2V5KHRoaXMsIHZhbHVlKTtcblxuICAgIHJldHVybiBzdXBlci5kZWxldGUodmFsdWUpO1xuICB9XG59XG4iXX0=