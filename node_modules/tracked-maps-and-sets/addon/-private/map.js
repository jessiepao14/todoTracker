import { consumeKey, consumeCollection, dirtyKey, dirtyCollection } from './util';
export class TrackedMap extends Map {
    // **** KEY GETTERS ****
    get(key) {
        consumeKey(this, key);
        return super.get(key);
    }
    has(key) {
        consumeKey(this, key);
        return super.has(key);
    }
    // **** ALL GETTERS ****
    entries() {
        consumeCollection(this);
        return super.entries();
    }
    keys() {
        consumeCollection(this);
        return super.keys();
    }
    values() {
        consumeCollection(this);
        return super.values();
    }
    forEach(fn) {
        consumeCollection(this);
        super.forEach(fn);
    }
    get size() {
        consumeCollection(this);
        return super.size;
    }
    // **** KEY SETTERS ****
    set(key, value) {
        dirtyKey(this, key);
        dirtyCollection(this);
        return super.set(key, value);
    }
    delete(key) {
        dirtyKey(this, key);
        dirtyCollection(this);
        return super.delete(key);
    }
    // **** ALL SETTERS ****
    clear() {
        super.forEach((_v, k) => dirtyKey(this, k));
        dirtyCollection(this);
        return super.clear();
    }
}
if (typeof Symbol !== undefined) {
    let originalIterator = TrackedMap.prototype[Symbol.iterator];
    Object.defineProperty(TrackedMap.prototype, Symbol.iterator, {
        get() {
            consumeCollection(this);
            return originalIterator;
        }
    });
}
export class TrackedWeakMap extends WeakMap {
    get(key) {
        consumeKey(this, key);
        return super.get(key);
    }
    has(key) {
        consumeKey(this, key);
        return super.has(key);
    }
    set(key, value) {
        dirtyKey(this, key);
        return super.set(key, value);
    }
    delete(key) {
        dirtyKey(this, key);
        return super.delete(key);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLy1wcml2YXRlL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLGlCQUFpQixFQUNqQixRQUFRLEVBQ1IsZUFBZSxFQUNoQixNQUFNLFFBQVEsQ0FBQztBQUVoQixNQUFNLE9BQU8sVUFBcUMsU0FBUSxHQUFTO0lBQ2pFLHdCQUF3QjtJQUN4QixHQUFHLENBQUMsR0FBTTtRQUNSLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBTTtRQUNSLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFdEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCx3QkFBd0I7SUFDeEIsT0FBTztRQUNMLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJO1FBQ0YsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEIsT0FBTyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU07UUFDSixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQXlDO1FBQy9DLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEdBQUcsQ0FBQyxHQUFNLEVBQUUsS0FBUTtRQUNsQixRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBTTtRQUNYLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEIsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLEtBQUs7UUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QixPQUFPLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsRUFBRTtJQUMvQixJQUFJLGdCQUFnQixHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTdELE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQzNELEdBQUc7WUFDRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixPQUFPLGdCQUFnQixDQUFDO1FBQzFCLENBQUM7S0FDRixDQUFDLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxjQUF1RCxTQUFRLE9BRzNFO0lBQ0MsR0FBRyxDQUFDLEdBQU07UUFDUixVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQU07UUFDUixVQUFVLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXRCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQU0sRUFBRSxLQUFRO1FBQ2xCLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFcEIsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQU07UUFDWCxRQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjb25zdW1lS2V5LFxuICBjb25zdW1lQ29sbGVjdGlvbixcbiAgZGlydHlLZXksXG4gIGRpcnR5Q29sbGVjdGlvblxufSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgVHJhY2tlZE1hcDxLID0gdW5rbm93biwgViA9IHVua25vd24+IGV4dGVuZHMgTWFwPEssIFY+IHtcbiAgLy8gKioqKiBLRVkgR0VUVEVSUyAqKioqXG4gIGdldChrZXk6IEspIHtcbiAgICBjb25zdW1lS2V5KHRoaXMsIGtleSk7XG5cbiAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gIH1cblxuICBoYXMoa2V5OiBLKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmhhcyhrZXkpO1xuICB9XG5cbiAgLy8gKioqKiBBTEwgR0VUVEVSUyAqKioqXG4gIGVudHJpZXMoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuZW50cmllcygpO1xuICB9XG5cbiAga2V5cygpIHtcbiAgICBjb25zdW1lQ29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5rZXlzKCk7XG4gIH1cblxuICB2YWx1ZXMoKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIudmFsdWVzKCk7XG4gIH1cblxuICBmb3JFYWNoKGZuOiAodmFsdWU6IFYsIGtleTogSywgbWFwOiB0aGlzKSA9PiB2b2lkKSB7XG4gICAgY29uc3VtZUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICBzdXBlci5mb3JFYWNoKGZuKTtcbiAgfVxuXG4gIGdldCBzaXplKCkge1xuICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNpemU7XG4gIH1cblxuICAvLyAqKioqIEtFWSBTRVRURVJTICoqKipcbiAgc2V0KGtleTogSywgdmFsdWU6IFYpIHtcbiAgICBkaXJ0eUtleSh0aGlzLCBrZXkpO1xuICAgIGRpcnR5Q29sbGVjdGlvbih0aGlzKTtcblxuICAgIHJldHVybiBzdXBlci5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUoa2V5OiBLKSB7XG4gICAgZGlydHlLZXkodGhpcywga2V5KTtcbiAgICBkaXJ0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGtleSk7XG4gIH1cblxuICAvLyAqKioqIEFMTCBTRVRURVJTICoqKipcbiAgY2xlYXIoKSB7XG4gICAgc3VwZXIuZm9yRWFjaCgoX3YsIGspID0+IGRpcnR5S2V5KHRoaXMsIGspKTtcbiAgICBkaXJ0eUNvbGxlY3Rpb24odGhpcyk7XG5cbiAgICByZXR1cm4gc3VwZXIuY2xlYXIoKTtcbiAgfVxufVxuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gdW5kZWZpbmVkKSB7XG4gIGxldCBvcmlnaW5hbEl0ZXJhdG9yID0gVHJhY2tlZE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhY2tlZE1hcC5wcm90b3R5cGUsIFN5bWJvbC5pdGVyYXRvciwge1xuICAgIGdldCgpIHtcbiAgICAgIGNvbnN1bWVDb2xsZWN0aW9uKHRoaXMpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsSXRlcmF0b3I7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIFRyYWNrZWRXZWFrTWFwPEsgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3QsIFYgPSB1bmtub3duPiBleHRlbmRzIFdlYWtNYXA8XG4gIEssXG4gIFZcbj4ge1xuICBnZXQoa2V5OiBLKSB7XG4gICAgY29uc3VtZUtleSh0aGlzLCBrZXkpO1xuXG4gICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICB9XG5cbiAgaGFzKGtleTogSykge1xuICAgIGNvbnN1bWVLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5oYXMoa2V5KTtcbiAgfVxuXG4gIHNldChrZXk6IEssIHZhbHVlOiBWKSB7XG4gICAgZGlydHlLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5zZXQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICBkZWxldGUoa2V5OiBLKSB7XG4gICAgZGlydHlLZXkodGhpcywga2V5KTtcblxuICAgIHJldHVybiBzdXBlci5kZWxldGUoa2V5KTtcbiAgfVxufVxuIl19