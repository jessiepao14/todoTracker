var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { tracked } from '@glimmer/tracking';
class Tag {
    static consumeTag(tag) {
        // read the tag value
        tag.__tag_value__;
    }
    static dirtyTag(tag) {
        // write the tag value
        tag.__tag_value__ = undefined;
    }
}
__decorate([
    tracked
], Tag.prototype, "__tag_value__", void 0);
export function createTag() {
    return new Tag();
}
export const consumeTag = Tag.consumeTag;
export const dirtyTag = Tag.dirtyTag;
////////////
const COLLECTION_SYMBOL = {};
export let consumeCollection = (obj) => {
    consumeKey(obj, COLLECTION_SYMBOL);
};
export let dirtyCollection = (obj) => {
    dirtyKey(obj, COLLECTION_SYMBOL);
};
if (Ember !== undefined) {
    // eslint-disable-next-line ember/new-module-imports
    consumeCollection = (obj) => Ember.get(obj, '[]');
    // eslint-disable-next-line ember/new-module-imports
    dirtyCollection = (obj) => Ember.notifyPropertyChange(obj, '[]');
}
////////////
const OBJECT_TAGS = new WeakMap();
function getOrCreateTag(obj, key) {
    let tags = OBJECT_TAGS.get(obj);
    if (tags === undefined) {
        tags = new Map();
        OBJECT_TAGS.set(obj, tags);
    }
    let tag = tags.get(key);
    if (tag === undefined) {
        tag = new Tag();
        tags.set(key, tag);
    }
    return tag;
}
export function consumeKey(obj, key) {
    consumeTag(getOrCreateTag(obj, key));
}
export function dirtyKey(obj, key) {
    dirtyTag(getOrCreateTag(obj, key));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy8tcHJpdmF0ZS91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU1QyxNQUFNLEdBQUc7SUFHUCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVE7UUFDeEIscUJBQXFCO1FBQ3JCLEdBQUcsQ0FBQyxhQUFhLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBUTtRQUN0QixzQkFBc0I7UUFDdEIsR0FBRyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBWFU7SUFBUixPQUFPOzBDQUFrQztBQWE1QyxNQUFNLFVBQVUsU0FBUztJQUN2QixPQUFPLElBQUksR0FBRyxFQUFFLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBRXJDLFlBQVk7QUFFWixNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztBQUU3QixNQUFNLENBQUMsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLEdBQVcsRUFBUSxFQUFFO0lBQ25ELFVBQVUsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBSSxlQUFlLEdBQUcsQ0FBQyxHQUFXLEVBQVEsRUFBRTtJQUNqRCxRQUFRLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBSUYsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO0lBQ3ZCLG9EQUFvRDtJQUNwRCxpQkFBaUIsR0FBRyxDQUFDLEdBQUcsRUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEQsb0RBQW9EO0lBQ3BELGVBQWUsR0FBRyxDQUFDLEdBQUcsRUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN4RTtBQUVELFlBQVk7QUFFWixNQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU8sRUFBNkIsQ0FBQztBQUU3RCxTQUFTLGNBQWMsQ0FBQyxHQUFXLEVBQUUsR0FBWTtJQUMvQyxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWhDLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUN0QixJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNqQixXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1QjtJQUVELElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFeEIsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1FBQ3JCLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3BCO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXLEVBQUUsR0FBWTtJQUNsRCxVQUFVLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVcsRUFBRSxHQUFZO0lBQ2hELFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDckMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRyYWNrZWQgfSBmcm9tICdAZ2xpbW1lci90cmFja2luZyc7XG5cbmNsYXNzIFRhZyB7XG4gIEB0cmFja2VkIHByaXZhdGUgX190YWdfdmFsdWVfXzogdW5kZWZpbmVkO1xuXG4gIHN0YXRpYyBjb25zdW1lVGFnKHRhZzogVGFnKSB7XG4gICAgLy8gcmVhZCB0aGUgdGFnIHZhbHVlXG4gICAgdGFnLl9fdGFnX3ZhbHVlX187XG4gIH1cblxuICBzdGF0aWMgZGlydHlUYWcodGFnOiBUYWcpIHtcbiAgICAvLyB3cml0ZSB0aGUgdGFnIHZhbHVlXG4gICAgdGFnLl9fdGFnX3ZhbHVlX18gPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhZygpIHtcbiAgcmV0dXJuIG5ldyBUYWcoKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbnN1bWVUYWcgPSBUYWcuY29uc3VtZVRhZztcbmV4cG9ydCBjb25zdCBkaXJ0eVRhZyA9IFRhZy5kaXJ0eVRhZztcblxuLy8vLy8vLy8vLy8vXG5cbmNvbnN0IENPTExFQ1RJT05fU1lNQk9MID0ge307XG5cbmV4cG9ydCBsZXQgY29uc3VtZUNvbGxlY3Rpb24gPSAob2JqOiBvYmplY3QpOiB2b2lkID0+IHtcbiAgY29uc3VtZUtleShvYmosIENPTExFQ1RJT05fU1lNQk9MKTtcbn07XG5cbmV4cG9ydCBsZXQgZGlydHlDb2xsZWN0aW9uID0gKG9iajogb2JqZWN0KTogdm9pZCA9PiB7XG4gIGRpcnR5S2V5KG9iaiwgQ09MTEVDVElPTl9TWU1CT0wpO1xufTtcblxuZGVjbGFyZSBjb25zdCBFbWJlcjogYW55O1xuXG5pZiAoRW1iZXIgIT09IHVuZGVmaW5lZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZW1iZXIvbmV3LW1vZHVsZS1pbXBvcnRzXG4gIGNvbnN1bWVDb2xsZWN0aW9uID0gKG9iaik6IHZvaWQgPT4gRW1iZXIuZ2V0KG9iaiwgJ1tdJyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlbWJlci9uZXctbW9kdWxlLWltcG9ydHNcbiAgZGlydHlDb2xsZWN0aW9uID0gKG9iaik6IHZvaWQgPT4gRW1iZXIubm90aWZ5UHJvcGVydHlDaGFuZ2Uob2JqLCAnW10nKTtcbn1cblxuLy8vLy8vLy8vLy8vXG5cbmNvbnN0IE9CSkVDVF9UQUdTID0gbmV3IFdlYWtNYXA8b2JqZWN0LCBNYXA8dW5rbm93biwgVGFnPj4oKTtcblxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVUYWcob2JqOiBvYmplY3QsIGtleTogdW5rbm93bikge1xuICBsZXQgdGFncyA9IE9CSkVDVF9UQUdTLmdldChvYmopO1xuXG4gIGlmICh0YWdzID09PSB1bmRlZmluZWQpIHtcbiAgICB0YWdzID0gbmV3IE1hcCgpO1xuICAgIE9CSkVDVF9UQUdTLnNldChvYmosIHRhZ3MpO1xuICB9XG5cbiAgbGV0IHRhZyA9IHRhZ3MuZ2V0KGtleSk7XG5cbiAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnID0gbmV3IFRhZygpO1xuICAgIHRhZ3Muc2V0KGtleSwgdGFnKTtcbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zdW1lS2V5KG9iajogb2JqZWN0LCBrZXk6IHVua25vd24pIHtcbiAgY29uc3VtZVRhZyhnZXRPckNyZWF0ZVRhZyhvYmosIGtleSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlydHlLZXkob2JqOiBvYmplY3QsIGtleTogdW5rbm93bikge1xuICBkaXJ0eVRhZyhnZXRPckNyZWF0ZVRhZyhvYmosIGtleSkpO1xufVxuIl19